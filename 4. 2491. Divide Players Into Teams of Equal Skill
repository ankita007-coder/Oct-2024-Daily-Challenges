#brute

class Solution(object):
    def dividePlayers(self, skill):
        """
        :type skill: List[int]
        :rtype: int
        """
        n = len(skill)
        if n==2:
            return skill[0]*skill[1]
        summ = sum(skill)
        if summ%(n//2)!=0 or n%2!=0:
            return -1
        
        pair_skill = summ//(n//2)
        count=0
        s ={}
        prod_sum = 0
        for i in range(n):
            if pair_skill-skill[i] not in s:
                s[skill[i]] = s.get(skill[i],0)+1
            else:
                count+=1
                prod_sum+=(skill[i]*(pair_skill-skill[i]))
                s[pair_skill-skill[i]]-=1
                if s[pair_skill-skill[i]]==0:
                    del s[pair_skill-skill[i]]
        if count!=n//2:
            return -1
        return prod_sum if prod_sum!=0 else -1

        
#optimal
class Solution(object):
    def dividePlayers(self, skill):
        """
        :type skill: List[int]
        :rtype: int
        """
        skill.sort()
        n = len(skill)
        prod_sum = 0
        summ = sum(skill)
        target = summ//(n//2)
        
        for i in range(n//2):
            if target!=(skill[i]+skill[n-i-1]):
                return -1
            prod_sum+=(skill[i]*skill[n-i-1])
        return prod_sum
